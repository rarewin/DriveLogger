plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'io.realm.kotlin'
    id 'deploygate'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

def getVersionName = { variant ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            executable = 'git'
            args = ['describe', '--tag', '--dirty']
            standardOutput = stdout
        }
        return stdout.toString().trim() + "(${variant})"
    } catch (exception) {
        println(exception)
        return "0.0.0-invalid(${variant})"
    }
}

def getVersionCode = { versionName ->
    try {
        def matcher = (versionName =~ /^([0-9]+)\.([0-9]+)\.([0-9]+).*/)
        if (!matcher.matches()
                || matcher.group(2).length() > 2
                || matcher.group(3).length() > 2) {
            throw new RuntimeException("Invalid version name \"${versionName}\", format \"x.y.z\" expected.")
        }

        return Integer.parseInt(matcher.group(1)) * 10000 \
                       + Integer.parseInt(matcher.group(2)) * 100 \
                       + Integer.parseInt(matcher.group(3))
    } catch (exception) {
        println(exception)
        return 0
    }
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "org.tirasweel.drivelogger"
        minSdk 24
        targetSdk 33
        compileSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '19'
        targetCompatibility = '19'
    }
    kotlinOptions {
        jvmTarget = '19'
    }
    buildFeatures {
        viewBinding true
        compose true
    }
    namespace 'org.tirasweel.drivelogger'
    ndkVersion '24.0.8215888'

    applicationVariants.all { variant ->
        def versionTag = getVersionName(variant.buildType.name)
        def myVersionCode = getVersionCode(versionTag)
        def myVersionName = versionTag
        variant.outputs.each { output ->
            println("${variant.name} [${myVersionCode}, ${myVersionName}]")
            output.versionNameOverride = myVersionName
            output.versionCodeOverride = myVersionCode
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.4.1'
    }
}

dependencies {
    implementation 'io.realm.kotlin:library-base:1.7.0'
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.fragment:fragment-ktx:1.6.0'
    implementation "androidx.navigation:navigation-compose:2.6.0"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    def composeBom = platform('androidx.compose:compose-bom:2022.10.00')
    implementation(composeBom)
    androidTestImplementation(composeBom)

    implementation "androidx.compose.runtime:runtime:1.4.3"
    implementation 'androidx.activity:activity-compose:1.7.2'
    implementation "androidx.compose.ui:ui:1.4.3"
    implementation "androidx.compose.foundation:foundation:1.4.3"
    implementation "androidx.compose.foundation:foundation-layout:1.4.3"
    implementation "androidx.compose.material3:material3:1.1.1"
    implementation "androidx.compose.runtime:runtime-livedata:1.4.3"
    implementation "androidx.compose.ui:ui-tooling:1.4.3"
    implementation "com.google.accompanist:accompanist-themeadapter-material:0.28.0"
}